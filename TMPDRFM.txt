Template-Driven Forms in Angular 

Template-driven forms are one of the two main approaches to handling forms in Angular (the other being reactive forms). 

In Angular , template-driven forms continue to work similarly to previous versions, with some minor improvements and optimizations.

Key Features of Template-Driven Forms:
----------------------------------------
Declarative approach: Forms are defined in templates

Two-way data binding: Uses [(ngModel)] for synchronization

Automatic form control creation: Angular creates form controls automatically

Simpler setup: Less boilerplate code compared to reactive forms

Setup
---------
First, ensure you've imported FormsModule in your application:


import { FormsModule } from '@angular/forms';

@NgModule({
  imports: [
    FormsModule
    // other imports
  ]
})

export class AppModule { }


Basic Template-Driven Form Example
===================================
<form #userForm="ngForm" (ngSubmit)="onSubmit(userForm)">
  <div>
    <label for="name">Name:</label>
    <input 
      type="text" 
      id="name" 
      name="name" 
      [(ngModel)]="user.name" 
      required
      minlength="3"
      #name="ngModel"
    >
    <div *ngIf="name.invalid && (name.dirty || name.touched)">
      <div *ngIf="name.errors?.['required']">Name is required</div>
      <div *ngIf="name.errors?.['minlength']">
        Name must be at least 3 characters long
      </div>
    </div>
  </div>

  <div>
    <label for="email">Email:</label>
    <input 
      type="email" 
      id="email" 
      name="email" 
      [(ngModel)]="user.email" 
      required
      email
      #email="ngModel"
    >
    <div *ngIf="email.invalid && (email.dirty || email.touched)">
      <div *ngIf="email.errors?.['required']">Email is required</div>
      <div *ngIf="email.errors?.['email']">Invalid email format</div>
    </div>
  </div>

  <button type="submit" [disabled]="userForm.invalid">Submit</button>
</form>
Component class:

typescript
export class UserFormComponent {
  user = {
    name: '',
    email: ''
  };

  onSubmit(form: NgForm) {
    if (form.valid) {
      console.log('Form submitted:', this.user);
      // Typically you would send data to a server here
    }
  }
}

Key Directives in Template-Driven Forms:
=========================================
ngForm: Creates a top-level FormGroup instance

ngModel: Creates a FormControl instance for a form element

ngModelGroup: Creates a nested FormGroup

Form Validation
Template-driven forms support both HTML5 validation and custom Angular validators:

Built-in Validators
required

minlength

maxlength

pattern (for regex)

email







Custom Validators
You can create custom validators as functions:
==================================================
function forbiddenNameValidator(nameRe: RegExp): ValidatorFn {
  return (control: AbstractControl): ValidationErrors | null => {
    const forbidden = nameRe.test(control.value);
    return forbidden ? {forbiddenName: {value: control.value}} : null;
  };
}
To use in template:

html
<input 
  type="text" 
  [(ngModel)]="user.name" 
  name="name" 
  [ngModelOptions]="{ updateOn: 'blur' }"
  #name="ngModel"
  [appForbiddenName]="forbiddenNames"
>
ngModelOptions
You can configure when model updates occur:

html
<input 
  [(ngModel)]="user.name" 
  [ngModelOptions]="{standalone: true, updateOn: 'blur'}"
>
Options:

standalone: true - Don't register with parent form

updateOn: 'blur' - Update on blur instead of input

Advantages of Template-Driven Forms
Quick to implement for simple forms

Less boilerplate code

Familiar to developers coming from AngularJS

Good for simple scenarios with basic validation

When to Use Template-Driven Forms
Simple forms with basic validation

Quick prototypes

When you prefer writing logic in the template

When form structure is static

For more complex scenarios (dynamic forms, complex validation, etc.), consider using reactive forms instead.

Angular 16 Specific Notes
Angular 16 maintains backward compatibility with template-driven forms while offering improved performance and developer experience. The core concepts remain the same as in previous versions.